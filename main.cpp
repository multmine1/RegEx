#include <iostream>
#include "regex.hpp"

/*
 Разработать библиотеку для работы с регулярными выражениями. В качестве алфавита могут использовать любые печатные символы, метасимволы экранируются символом ‘\’.

 O Кроме этого, должен поддерживаться символ, определяющий пустую подстроку ‘$’

 O Регулярный выражения должны поддерживать следующие операции:

 O Операция ‘или’: r1|r2 (метасимвол ‘|’)

 O Операция ‘конкатенация’: r1r2

 O Операция ‘замыкание Клини’: r* (метасимвол ‘*’)

 O Операция ‘символ из набора’: [a1a2a3…] (метасимвол ‘[]’)

 O Операция ‘повтор выражения’: r{x} (метасимвол ‘{х}’, где x – количество повторов)

 O Операция ‘нумерованная группа захвата’: (r) (метасимвол ‘()’), выражения из групп захвата нумеруются в порядке их следования

------
X Операция ‘выражение из нумерованной группы захвата’: \n (метасимвол ‘\’, n – номер группы захвата)
------
 O В регулярных выражениях могут использоваться операторные скобки (:r), определяющие приоритет операторов. (метасимвол ‘(: )’), т.е. если в скобках первых идет символ ‘:’, то это отменяет захват выражения.
 
 Библиотека должна поддерживать следующие операции:

 O findall – поиск всех непересекающихся вхождений подстрок в строку соответствующих регулярному выражению с перегрузкой без доступа и с доступом к группам захвата через специальный объект (через итератор и оператор индексации).

 O Регулярные выражения могут быть заранее скомпилированы в ДКА через НКА (РВ->НКА->ДКА->минимальный ДКА), т.е. должен поддерживаться метод compile(), при этом допустим вызов операций с регулярными выражениями, как со скомпилированным объектом, так и со строковым представлением.

 Для скомпилированных автоматов библиотека должна поддерживать операцию восстановления регулярного выражения методом исключения состояний.

 Библиотека должна поддерживать операцию построения дополнения к языку, задаваемому регулярным выражением (скомпилированным ДКА).

 Библиотека должна поддерживать операцию построения пересечения языков, задаваемых регулярными выражениями (скомпилированными ДКА).
 */

#include <regex>

int main() {
    
    return 0;
    
}
